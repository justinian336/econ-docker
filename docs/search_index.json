[["index.html", "Dockerによる作業環境構築 このサイトについて", " Dockerによる作業環境構築 Juan Martínez 2021-11-22 このサイトについて これは経済セミナー１２・１月号の「Dockerによる作業環境構築」のサポートページである。紙幅の関係で掲載できなかった情報や、本誌掲載内容を実践する際に役立つ補足情報などを掲載する。 本誌掲載内容を含め、実証研究におけるDockerの使い方に関わる情報をご紹介するものであり、その他の用途や機能についての情報などが必要な場合 公式ガイドを参考にされたい。 "],["dockerを使い始めるには.html", "セクション 1 Dockerを使い始めるには 1.1 PCにインストールする 1.2 オンラインでの利用", " セクション 1 Dockerを使い始めるには Dockerは、Windows、MacOS、Linux環境で使用することができる。このセクションでは、Dockerの操作を学ぶための環境を準備する方法（構築やアクセス）を紹介する。 1.1 PCにインストールする 自分のパソコンにDockerをインストールする手順 Dockerの公式サイトに掲載されている。 あなたのOSがWindowsとMacOSであればDocker Desktopをインストールするだけで、全ての必要なツールだけではなく、便利なグラフィカル・ユーザー・インターフェース（GUI）まで入手できる。未経験のユーザーが最も簡単に充実した環境を整備するための方法である。 Docker DesktopのGUIでは、コマンドライン・インターフェース（CLI）を使わなくても、Docker Imageの管理、新しいコンテナの起動、ログの確認などができる。 高度な操作の一部はCLIによって行わざるを得ないが、はじめに学習のために使うならばGUIを用いて学ぶほうが遥かに楽である。簡単な操作を行うには、無駄に苦しまないで学習できる。 1.2 オンラインでの利用 Dockerを学んでみたいが、インストールするのが面倒だと思う人はPlay With Dockerを使うことができる。Play With DockerはDocker社が提供するサンドボックスのクラウド環境である。Linux環境でDockerの様々なツールが既にインストールされているため、起動するだけですぐに練習できる。 利用環境のリソース（容量、メモリー、プロセッサー）はかなり限定的なので、重いタスクの処理には適さないが、簡単なコンテナの立ち上げや小さいImageをビルドするには十分である。Play With Dockerをアクセスするには無料のDockerアカウントが必要である。 "],["docker-volumes.html", "セクション 2 Docker Volumes", " セクション 2 Docker Volumes Docker containerの中で作成されるファイルは、コンテナを破棄した時に削除されるが、論文執筆や発表準備のために結果を保存したい時もある。その場合には、コンテナの中で作成された一部のファイルを、コンテナ外の環境とつながっているフォルダーに保存することで、コンテナ破棄後もそのファイルを残すことができる。このセクションではその「コンテナ外と繋がったフォルダー」の作り方を紹介する。 自分のパソコンに次のようなフォルダー構造があるとしよう： . ├── my-project │   ├── Dockerfile │   ├── analyze_data.py │   └── clean_data.py └── results └── figure_1.png 自分の/home/フォルダーに my-projectとresultsという二つのフォルダーがある。Dockerfileはmy-projectの中にあるため、そのフォルダーの中からdocker build --tag my-research-imageを実行しても resultsの内容がDocker Imageの中にコピーされない。コンテナの中で得られたデータ分析の結果をresultsに保存したい場合はそのフォルダーとコンテナ内のフォルダーとの橋を作る必要がある。そのためにはdocker runの-vオプションを用いる。この例では： docker run -v /home/results:/home/rstudio/results my-research-image というコマンドを使えばDocker volumeを作成することができる。この例ではそのvolumeはコンテナ外の/home/resultsというフォルダーを、コンテナ内にある/home/rstudio/resultsと繋いでいる。パソコンの /home/resultsフォルダーに保存されたファイルには、コンテナ内の/home/rstudio/resultsからアクセスできる。逆に、コンテナ内でそのロケーションに置かれるファイルには、自分のパソコンの/home/resultsフォルダーからアクセスすることができる。コンテナが破棄されてもvolumeのファイルは削除されない。 Docker volumesの使い方は上記の例以外にも複数あるため、volumesの 公式ガイドを確認しよう。 "],["docker-compose.html", "セクション 3 Docker Compose", " セクション 3 Docker Compose Docker Composeは複数のコンテナで構成される作業環境を管理するツールである。また、作業環境の設定を1つのファイルにまとめたい時にも使われる。このセクションではデータ分析のためのDocker Composeの使い方を紹介する。より詳しい情報が必要な場合は 公式ガイドを確認されたい。 まず、Docker ComposeはDockerのコマンドラインインターフェースとは異なるツールなので、Dockerがインストールされているパソコンであっても、必ずDocker Composeがインストールされているとは限らない。ただし、Docker Desktop for Windows、またはMacOSでDockerをインストールした場合には、Composeは一緒にインストールされている。 下記のフォルダー構造の場合で考えてみよう： . ├── data_analysis │   ├── Dockerfile │   ├── analyze_data.py ├── data_processing │   ├── Dockerfile │   ├── process_data.py └── docker-compose.yaml データクリーニングやデータ分析はそれぞれ独立したタスクであるため、それぞれのDocker ImageやそのDockerfileがあり、必要な設定（volume、環境変数、portsなど）も異なる。 これらのコンテナの設定はdocker-compose.yamlというファイルにまとめられている。その内容は以下の通りである。： version: &quot;3&quot; services: data_processing: build: context: . dockerfile: ./data_processing/Dockerfile volumes: - /home/users/me/data/:/data/ data_analysis: build: context: . dockerfile: ./data_analysis/Dockerfile ports: - 8787:8787 environment: - NUM_CORES: ${MY_NUM_CORES} volumes: - /home/users/me/data/:/data/ このファイルでは二つのサービスが定義されている：data_processingとdata_analysis。それぞれのサービスの定義の中には build, ports, volumes, environmentといったサブセクションがあり、その中で必要なDockerfileへのパス、volumeの設定、アクセスに必要なポート、コンテナ内のプログラムがアクセスしてほしい環境変数を定義している。これらの定義は docker runでコンテナを立ち上げる際にも設定できるが、その場合コマンドが非常に長くなってしまう。そのため、必要なオプションを設定し忘れたり、書き間違えたりするミスが起きやすい。Docker Composeを使えばコンテナの起動はより簡単になる。 例えば、data_analysisというサービスのみを立ち上げたいときは docker-compose up data_analysisを実行する。作業が終わって、サービスを停止したい場合は docker-compose stop data_analysisで簡単にできる。さらに、docker-compose downを使えばこのdocker-compose.yamlファイルで定義されている全てのサービスが破棄される。 単純にdocker-compose upを実行すると全ての定義されたサービスが同時に立ち上がる。上記の例では、同時に立ち上げる必要はない（データクリーニングとデータ分析を同時に行うことはないだろう）が、同時に立ち上げる必要がある作業もある。例えば、テキストデータや地理情報を分析する場合には、それぞれのデータ構造に適したデータベースが必要になる。そのため、データ分析の作業環境とともにデータベースを同時に立ち上げておく必要があるが、データベースをサービスとしてdocker-compose.yamlに定義することでそのワークフローが可能になる。 "],["練習問題.html", "セクション 4 練習問題 4.1 Hello World 4.2 牛を喋らせる", " セクション 4 練習問題 初めて使う人にとってDockerはとても難解なものに見えるが、慣れてしまえばその使い方はとても直観的で楽しい。そのためには、小さな練習問題を解くことが効果的である。このセクションでは簡単な練習問題を解きながらDockerの基本を復習できる。Dockerがインストールされている環境を用意する必要がある。まだ用意していない場合はインストール Dockerを使い始めるにはを参考に準備してほしい。 4.1 Hello World この練習問題では公式の hello-world Docker Imageを使って、コンテナを立ち上げる。コンテナが起動すると、メッセージが画面にプリントされて自動的に停止する。 docker runを使ってhello-world Imageからコンテナを立ち上げてみよう： 回答はこちら docker run hello-world コンテナがメインコマンドを実行して自動的に停止しても、この時点ではコンテナがまだ破棄されていない。コンテナのステータスはExitedになっているはずだ。docker ps --allを実行することで全てのコンテナのステータスを確認することができる。この例では、立ち上げの際にコンテナに名前を付与しなかったため、Dockerがランダムに名前を付けてくれた。その名前はdocker ps --allコマンドで確認できる。筆者がこの例を作成した際にはgallant_archimedesという名前が付けられた。 不要なコンテナは邪魔なので、 docker rmとDockerが付与してくれたコンテナの名前を使って破棄してみよう： 回答はこちら docker rm gallant_archimedes もう一度hello-worldからコンテナを立ち上げる。今回はmy-containerという名前を付けてみよう： 回答はこちら docker run --name my-container hello-world コンテナが停止したらdocker ps --allを使って、my-containerというコンテナがあることを確認できる。 確認できたらdocker rm my-containerを使って破棄しよう。 毎回コンテナを破棄するならば、停止とともに自動的に破棄されるようにしたほうが効率がいい。もう一度コンテナを立ち上げてみよう。今回は rmオプションを使う。確認しやすくするために、my-containerという名前を付けておこう。 回答はこちら docker run --name my-container --rm hello-world コンテナが停止したらdocker ps --allを使って、my-containerというコンテナがないことを確認してみてほしい。コンテナが破棄されていれば見つからないはずだ。 全部上手くいっただろうか？お疲れ様！ 🍵 4.2 牛を喋らせる Dockerfileを使ってDocker Imageをビルドしてみよう。 まずフォルダーを作成し、その中にDockerfileというファイルを作成する。ファイルの内容は下記のようにしてみよう： FROM rancher/cowsay このファイルから作成されるDocker Imageは cowsayの公式イメージをベースにしている。 cowsayはコマンドラインの使い方を学習するためによく使われているLinuxのプログラムである。この練習問題ではDockerfileを編集して、牛を喋らせていく。 同じフォルダーからdocker buildを使ってDocker Imageをビルドしよう。イメージの名前をmy-cow:v1にしよう。 回答はこちら docker build --tag my-cow:v1 . 初めてrancher/cowsayイメージを使う際には、Docker Hubから自動的にダウンロードされる。ビルドが無事に終わったらdocker imagesというコマンドを実行して、レポジトリ名 my-cow、tag v1というイメージがあることを確認しよう。 そのイメージからコンテナを立ち上げよう： docker run --rm my-cow:v1 moo 下記のような牛が表示されるはずだ。 _____ &lt; moo &gt; ----- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || 実行したコマンドにあるmooはDocker ImageのEntrypoint（入口）に渡される引数である。そのEntrypointはDockerfileで設定できる。 cowsayというプログラムの使い方を説明しよう。例えば cowsay \"hello world\"を実行すると、牛が hello worldと喋る。つまり、hello worldはcowsayに渡される引数である。先ほど作ったイメージのEntrypointは cowsayというコマンドなので、docker runコマンドのDocker Imageの次にmooと書いて実行することは、コンテナ内でcowsay mooを実行するのと同じである。 ベースのDocker ImageのEntrypointを上書きするために、自分の作成したDockerfileに定義する必要がある。 先ほど作成したDockerfileを編集して、牛がデフォルトで経済セミナーはすごい！と喋る ようにしよう。 回答はこちら FROM rancher/cowsay ENTRYPOINT cowsay &quot;経済セミナーはすごい！&quot; my-cow:v2と名付けしてイメージをビルドする。 回答はこちら docker build --tag my-cow:v2 . コンテナを立ち上げてみよう： docker run --rm my-cow:v2 Dockerfileが正しければ牛は次のように喋る： ___________________________________ &lt; 経済セミナーはすごい！ &gt; ----------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || 素晴らしいメッセージだが、毎回実行するたびに同じメッセージが表示されるのはつまらないかもしれない。 ファイルに複数のメッセージを書き込んで、そこから牛がランダムに台詞を選ぶようにしてみよう！ まず、dadjokesというファイルを作成する、内容は牛の台詞である。： マイケル・ジョーダンの冗談はまぁいける冗談 そのメロン、食べるのやめろん 朝食食べて超ショック！ 車が来るまで待とう パジャマを着ているパパ、邪魔だ ライスだけでは、辛いっす！ 係長になるまで、まだまだ時間がかかりちょー 下手なシャレは、辞めなしゃれ ソーダは美味しそーだ 都会から来たって、「ホントかい？」 このサイトからとてもレベルの高いおやじギャグを選んでみた。 dadjokesファイルをDocker Imageの中に追加するように、Dockerfileを編集してみる。 回答はこちら FROM rancher/cowsay ADD ./dadjokes dadjokes ENTRYPOINT cowsay &quot;経済セミナーはすごい！&quot; ADDコマンドはDockerfileと同じフォルダーにあるdadjokesというファイルをコピーして、Imageの中に dadjokesという名前で保存する。 次に、ファイルから１つの台詞がランダムに選択されて、その内容がcowsayに渡されるようにしよう。Entrypointを下記のように書き換える： ENTRYPOINT shuf -n 1 dadjokes | cowsay 簡単にコマンドを解釈すると、shuf -n 1 dadjokesは dadjokesファイルからランダムに１行を選択する。|はその結果を次のコマンド（この場合はcowsay）に渡す。 つまり、Dockerfileは下記のようになる： FROM rancher/cowsay ADD ./dadjokes dadjokes ENTRYPOINT shuf -n 1 dadjokes | cowsay my-cow:v3と名付けしてイメージをビルドする： docker build --tag my-cow:v3 . では、コンテナを立ち上げてみよう： docker run --rm my-cow:v3 全てが正しければ、牛は次のようにレベルの高いおやじギャグを喋るだろう： ___________________________________ &lt; 朝食食べて超ショック！ &gt; ----------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || これでDockerfileの書き方の基本を練習できた。Dockerfileの 公式ガイドはとても充実しているので、より詳しく知りたい人は参考にしてほしい。 🐮 "],["実証研究での実用例.html", "セクション 5 実証研究での実用例", " セクション 5 実証研究での実用例 このセクションではDockerを用いた経済学の実証研究の事例を紹介する。 Daniel L. Chen, John J. Horton (2016) Research Note—Are Online Labor Markets Spot Markets for Tasks? A Field Experiment on the Behavioral Response to Wage Cuts. Information Systems Research 27(2):403-423. リンク：http://john-joseph-horton.com/papers/wages_of_paycuts.pdf リポジトリ：https://github.com/johnjosephhorton/wages_of_paycuts ベースイメージ：ubuntu:latest 言語：Python、R McDermott, G.R. Skeptic priors and climate consensus. Climatic Change 166, 7 (2021). リンク：https://link.springer.com/article/10.1007/s10584-021-03089-x リポジトリ：https://github.com/grantmcdermott/skeptic-priors ベースイメージ：rocker/r-ver:4.0.2s 言語：Julia、Python、R "],["有料ソフトの利用.html", "セクション 6 有料ソフトの利用 6.1 Matlab 6.2 ArcGIS Notebook Server 6.3 Stata", " セクション 6 有料ソフトの利用 これまでにご紹介した事例は、オープンソースのコードとデータのみで構成されている。しかし、多くの研究者は、StataやMatlabなど、限定的なライセンスの有料ソフトウェアを使用している。 これらのソフトウェアをDockerで使用することは可能だが、それぞれのライセンスの規約等に従って利用しなければいけない。もし、それらのソフトウェア ・プロバイダーが公式のDocker Imageを提供している場合は、その指示に沿って利用できる。そうでない場合は、Docker上でのそれらのソフトウェアの利用が、あなたのライセンスにおいて許されているかを先に確認するべきである。このセクションでは、よく利用されている有料の統計ソフトをDocker上で用いる方法について簡単にまとめて紹介する。 6.1 Matlab Docker上でMatlabを利用する場合、公式のDocker Imageを使うことができる。詳しくは 公式レポジトリを確認してほしい。 6.2 ArcGIS Notebook Server ArcGISを用いたノートブック環境で、Docker上で地理情報の分析を行うことができる。 公式サイトの指示に従って利用してほしい。 6.3 Stata 筆者の管見の限り、Stataの公式Docker Imageや、Docker上での利用に関する公式ガイド等は存在しない。 American Economic ReviewのData Editorの GitHubアカウントでDockerでStataの利用を可能にするDocker Imageが公開されている。同じものが、Docker Hubの dataeditorsレポジトリでも入手することができる。当該ライセンスの内容を確認してから利用するとよい。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
